
(defparameter test-1 '(1 2 3)) ; Test set 1
(defparameter test-2 '(2 4 6)) ; Test set 2

;; Return T if item is a member of set.
;; Return NIL if item is not a member of set.
;; The type of set is list.
;; Examples:
;;  (set-member '(1 2) 1) => T
;;  (set-member '(1 2) 3) => NIL
(defun set-member (set item)
  (cond 
    ((null set) nil)  ; Base case that sees if a set is empty  then it returns nil
    ((equal item (car set)) t)  ; Return T if first atom is item
    (t (set-member (cdr set) item))) ; Calls this function recursively 
)

;; Return the union of set-1 and set-2.
;; The result should contain no duplicates.
;; Assume set-1 contains no duplicates and set-2 contains no duplicates.
;; Examples:
;;   (set-union '(1 2) '(2 4)) => '(1 2 4)
(defun set-union (set-1 set-2)
  (if (null set-1)
    set-2  ; Base case if set-1 is empty return set-2
    (if (set-member set-2 (car set-1)) ; Checks if first atom is already in list-2
      (set-union (cdr set-1) set-2)  ; If it is, the fist atom in set-1 wont get looked at
      (set-union (cdr set-1) (cons (car set-1) set-2))))  ; Adds atom to new set if it isnt

)

;; Return the intersection of set-1 and set-2.
;; The result should contain no duplicates.
;; Assume set-1 contains no duplicates and set-2 contains no duplicates.
;; Examples:
;;   (set-intersection '(1 2) '(2 4)) => '(2)
(defun set-intersection (set-1 set-2)
  ;; DONE
)


;; Return the difference of set-1 and set-2.
;; The result should contain no duplicates.
;; Assume set-1 contains no duplicates and set-2 contains no duplicates.
;; Examples:
;;   (set-diff '(1 2) '(2 4)) => '(1)
(defun set-diff (set-1 set-2)
  ;; DONE
)

;; Return the exclusive or of a and b
;; Examples:
;;  (boolean-xor t nil) => t
;;  (boolean-xor nil nil) => nil
(defun boolean-xor (a b)
  ;; Your implementation goes here
)

;; Return the implication of a and b
;; Examples:
;;  (boolean-implies t nil) => nil
;;  (boolean-implies nil nil) => t
(defun boolean-implies (a b)
  ;; Your implementation goes here
)

;; Return the bi-implication (if and only if) of a and b
;; Examples:
;;  (boolean-iff t nil) => nil
;;  (boolean-iff nil nil) => t
(defun boolean-iff (a b)
  (cond
    ((and (equal a t) (equal b t)) t) ; If a & b = true, return true
    ((and (equal a nil) (equal b nil)) t) ; If a & b = false, return true
    (t nil)) ; The other cases all return nil
)  

;; Evaluate a boolean expression.
;; Handle NOT, AND, OR, XOR, IMPLIES, and IFF.
;; Examples:
;;  (boolean-eval '(and t nil)) => nil
;;  (boolean-eval '(and t (or nil t))) => t
(defun boolean-eval (exp)
  ;; Your implementation goes here
)
