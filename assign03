;; Return T if item is a member of set.
;; Return NIL if item is not a member of set.
;; The type of set is list.
;; Examples:
;;  (set-member '(1 2) 1) => T
;;  (set-member '(1 2) 3) => NIL
(defun set-member (set item)
	(cond
		((equal set nil) nil) ; Base case that sees if a set is empty then it returns nil
		((equal item (car set)) t) ; Return T if first atom is item
		(t (set-member (cdr set) item))) ; Calls this function recursively
)
;; Return the union of set-1 and set-2.
;; The result should contain no duplicates.
;; Assume set-1 contains no duplicates and set-2 contains no duplicates.
;; Examples:
;;   (set-union '(1 2) '(2 4)) => '(1 2 4)
(defun set-union (set-1 set-2)
  (if (null set-1)
    set-2  ; Base case if set-1 is empty return set-2
    (if (set-member set-2 (car set-1)) ; Checks if first atom is already in list-2
      (set-union (cdr set-1) set-2)  ; If it is, the fist atom in set-1 wont get looked at
      (set-union (cdr set-1) (cons (car set-1) set-2))))  ; Adds atom to new set if it isnt

)

;; Return the intersection of set-1 and set-2.
;; The result should contain no duplicates.
;; Assume set-1 contains no duplicates and set-2 contains no duplicates.
;; Examples:
;;   (set-intersection '(1 2) '(2 4)) => '(2)
(defun set-intersection (set-1 set-2) 
  (if (equal set-1 '()) ;check if set-1 is empty (means empty intersection).
      '()
      (if (set-member set-2 (car set-1)) ;checks if the first element of set-1 is also a member of set-2
          (cons (car set-1) (set-intersection (cdr set-1) set-2)) ;first item in set-1 is a member of set-2, creates a new list, checks rest of list.
          (set-intersection (cdr set-1) set-2)))) ;first item fo set-1 is not a member of set-2, check rest of list

;; Return the difference of set-1 and set-2.
;; The result should contain no duplicates.
;; Assume set-1 contains no duplicates and set-2 contains no duplicates.
;; Examples:
;;   (set-diff '(1 2) '(2 4)) => '(1)
(defun set-diff (set-1 set-2)
   (if (equal set-1 '())
      '()
      (if (set-member set-2 (car set-1)) ;same as set-intersection
          (set-diff (cdr set-1) set-2) ;first element is a member of set-2, recursively call set-diff to check rest of list.
          (cons (car set-1) (set-diff (cdr set-1) set-2))))) ;first item(set-1) not a member of set-2 then make a list and continue to check through recursion.

;; Return the exclusive or of a and b
;; Examples:
;;  (boolean-xor t nil) => t
;;  (boolean-xor nil nil) => nil
(defun boolean-xor (a b)
  (and (or a b) (not (and a b)))
)

;; Return the implication of a and b
;; Examples:
;;  (boolean-implies t nil) => nil
;;  (boolean-implies nil nil) => t
(defun boolean-implies (a b)
    (cond
    ((and (equal a t) (equal b t)) t) ; If a & b = true, return true
    ((and (equal a nil) (equal b nil)) t) ; If a & b = false, return true
    ((and (equal a nil) (equal b t)) t) ; If a is nil and b is t, return true
    (t nil)) ; The other cases all return nil
)

;; Return the bi-implication (if and only if) of a and b
;; Examples:
;;  (boolean-iff t nil) => nil
;;  (boolean-iff nil nil) => t
(defun boolean-iff (a b)
  (cond
    ((and (equal a t) (equal b t)) t) ; If a & b = true, return true
    ((and (equal a nil) (equal b nil)) t) ; If a & b = false, return true
    (t nil)) ; The other cases all return nil
)  

;; Evaluate a boolean expression.
;; Handle NOT, AND, OR, XOR, IMPLIES, and IFF.
;; Examples:
;;  (boolean-eval '(and t nil)) => nil
;;  (boolean-eval '(and t (or nil t))) => t
(defun boolean-eval (exp)
  (cond

    ((set-member '(t nil) exp) exp) ; Base case, returns t or nil when no operator is there
    ((set-member '(xor implies iff or not and) (car exp))  ; Check for valid operator

     ;; These operands go through this function recursively,
     ;; and are in the LOCAL SCOPE! Until they hit the base case with t or nil 
     (let ((operand1 (boolean-eval (second exp))) 
           (operand2 (boolean-eval (third exp)))) 

     ;; After the operands hit the base case they can evaluate using this cond and
     ;; return control to the previous boolean-eval call.
       (cond
         ((set-member (list (car exp)) 'and) (and operand1 operand2))
         ((set-member (list (car exp)) 'or) (or operand1 operand2))
         ((set-member (list (car exp)) 'not) (not operand1))
         ((set-member (list (car exp)) 'xor) (boolean-xor operand1 operand2))
         ((set-member (list (car exp)) 'implies) (boolean-implies operand1 operand2))
         ((set-member (list (car exp)) 'iff) (boolean-iff operand1 operand2))
         (t (error "Invalid operator: ~A" (car exp))))))

    (t (error "Invalid input: ~A" exp)))  ; Error for invalid input
)

